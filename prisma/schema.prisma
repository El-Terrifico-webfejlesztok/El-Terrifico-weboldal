generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  username        String            @db.VarChar(30)
  email           String            @unique(map: "email") @db.VarChar(255)
  password        String            @db.VarChar(255)
  is_active       Boolean           @default(true)
  role            User_role         @default(user)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  Order           Order[]
  Payment         Payment?
  Review          Review[]
  ShippingAddress ShippingAddress[]
}

model Product {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  name                String                @unique(map: "name_is_unique") @db.VarChar(250)
  description         String?               @db.Text
  price               Decimal               @db.Decimal(10, 2)
  stock               Int
  is_active           Boolean               @default(true)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  ProductCategoryLink ProductCategoryLink[]
  ProductImage        ProductImage[]
  Review              Review[]
}

model Category {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  name                String                @unique(map: "name") @db.VarChar(250)
  ProductCategoryLink ProductCategoryLink[]
}

model Order {
  id              Int             @id @default(autoincrement()) @db.UnsignedInt
  user_id         Int             @db.UnsignedInt
  shipping_id     Int             @db.UnsignedInt
  total_price     Decimal         @db.Decimal(10, 2)
  created_at      DateTime        @default(now()) @db.Timestamp(0)
  updated_at      DateTime?       @default(now()) @db.Timestamp(0)
  ShippingAddress ShippingAddress @relation(fields: [shipping_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shipping_id")
  User            User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  OrderItem       OrderItem[]
  Payment         Payment[]

  @@index([shipping_id], map: "fk_shipping_id")
  @@index([user_id], map: "fk_user_id")
}

model Payment {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  user_id  Int     @unique(map: "unique_user_payment") @db.UnsignedInt
  order_id Int     @db.UnsignedInt
  amount   Decimal @db.Decimal(10, 2)
  status   String? @db.VarChar(250)
  Order    Order   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_id_payment")
  User     User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_payment")

  @@index([order_id], map: "fk_order_id_payment")
}

model OrderItem {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  order_id Int     @db.UnsignedInt
  name     String  @db.VarChar(250)
  quantity Int     @db.UnsignedInt
  price    Decimal @db.Decimal(10, 2)
  Order    Order   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_id_item")

  @@unique([order_id, name], map: "unique_order_item")
}

model Review {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  rating     Int       @db.UnsignedInt
  comment    String?   @db.Text
  user_id    Int       @db.UnsignedInt
  product_id Int       @db.UnsignedInt
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  Product    Product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_id_fk_review")
  User       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fk_review")

  @@index([product_id], map: "product_id_fk_review")
  @@index([user_id], map: "user_id_fk_review")
}

model ShippingAddress {
  id                 Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id            Int?      @db.UnsignedInt
  recipient_name     String?   @db.VarChar(255)
  street_address     String    @db.VarChar(255)
  country            String?   @db.VarChar(50)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  postal_code        String    @db.VarChar(20)
  is_default_address Int?      @default(1) @db.TinyInt
  created_at         DateTime  @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  Order              Order[]
  User               User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fk_shipping")

  @@index([user_id], map: "user_id_fk_shipping")
}

model ProductImage {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  image_path String   @db.VarChar(250)
  product_id Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")

  @@index([product_id], map: "fk_product_id")
}

model ProductCategoryLink {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id  Int      @db.UnsignedInt
  category_id Int      @db.UnsignedInt
  Category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "category_id_fk")
  Product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_id_fk")

  @@index([category_id], map: "category_id_fk")
  @@index([product_id], map: "product_id_fk")
}

enum User_role {
  user
  admin
}
